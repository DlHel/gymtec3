// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modelo de Usuario
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          String    @default("TECHNICIAN")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tickets       Ticket[]  @relation("AssignedTickets")
  createdTickets Ticket[] @relation("CreatedTickets")
  timeEntries   TimeEntry[]
}

// Modelo de Cliente
model Client {
  id            String    @id @default(cuid())
  name          String
  rut           String    @unique
  email         String
  phone         String?
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  locations     Location[]
  contracts     Contract[]
  tickets       Ticket[]
}

// Modelo de Ubicación (Sedes)
model Location {
  id            String    @id @default(cuid())
  name          String
  address       String
  phone         String?
  clientId      String
  client        Client    @relation(fields: [clientId], references: [id])
  equipment     Equipment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Modelo de Equipo
model Equipment {
  id               String    @id @default(cuid())
  model            String
  brand            String
  serialNumber     String?   @unique
  purchaseDate     DateTime?
  installationDate DateTime?
  locationId       String
  location         Location  @relation(fields: [locationId], references: [id])
  tickets          Ticket[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// Modelo de Contrato
model Contract {
  id            String    @id @default(cuid())
  clientId      String
  client        Client    @relation(fields: [clientId], references: [id])
  type          String
  startDate     DateTime
  endDate       DateTime?
  sla           String    // Almacena los términos del SLA como JSON string
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Modelo de Ticket
model Ticket {
  id            String    @id @default(cuid())
  title         String
  description   String
  status        String       @default("OPEN")
  priority      String       @default("MEDIUM")
  clientId      String
  client        Client    @relation(fields: [clientId], references: [id])
  equipmentId   String?
  equipment     Equipment? @relation(fields: [equipmentId], references: [id])
  assignedToId  String?
  assignedTo    User?     @relation("AssignedTickets", fields: [assignedToId], references: [id])
  createdById   String
  createdBy     User      @relation("CreatedTickets", fields: [createdById], references: [id])
  checklist     String?   // Almacena el checklist del ticket como JSON string
  partsUsed     PartUsage[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  checklistState String?
}

// Modelo de Uso de Repuestos
model PartUsage {
  id            String    @id @default(cuid())
  ticketId      String
  ticket        Ticket    @relation(fields: [ticketId], references: [id])
  partId        String
  part          Part      @relation(fields: [partId], references: [id])
  quantity      Int
  createdAt     DateTime  @default(now())
}

// Modelo de Repuesto
model Part {
  id            String    @id @default(cuid())
  name          String
  sku           String    @unique
  cost          Float
  stock         Int
  minStock      Int
  usages        PartUsage[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Modelo de Registro de Tiempo
model TimeEntry {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  startTime     DateTime
  endTime       DateTime?
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Modelo de Base de Conocimiento (por modelo de equipo)
model KnowledgeBaseEntry {
  id          String      @id @default(cuid())
  modelName   String      @unique // Ej: "Cinta Trotadora Pro X1"
  description String?
  checklists  Checklist[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Modelo de Checklist
model Checklist {
  id              String             @id @default(cuid())
  name            String             // Ej: "Mantenimiento Preventivo Mensual"
  tasks           String             // JSON string: [{ "id": "task1", "text": "Lubricar correa" }]
  knowledgeBaseId String
  knowledgeBase   KnowledgeBaseEntry @relation(fields: [knowledgeBaseId], references: [id])
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

// Enums como constantes (para referencia en código)
// Role: ADMIN, TECHNICIAN, CLIENT
// ContractType: FIXED_RATE, PER_VISIT, HYBRID
// TicketStatus: OPEN, IN_PROGRESS, WAITING_PARTS, WAITING_CLIENT, CLOSED
// Priority: LOW, MEDIUM, HIGH, URGENT 