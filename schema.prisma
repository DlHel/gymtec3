// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Security & Access
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("TECHNICIAN") // ADMIN, TECHNICIAN, CLIENT
  
  clientId String?
  client   Client? @relation(fields: [clientId], references: [id])

  accounts      Account[]
  sessions      Session[]
  
  createdTickets       Ticket[]               @relation("CreatedBy")
  assignedTickets      Ticket[]               @relation("AssignedTo")
  timeEntries          TimeEntry[]
  comments             Comment[]
  PettyCashTransaction PettyCashTransaction[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core CRM & Operations
model Client {
  id        String     @id @default(cuid())
  name      String
  rut       String     @unique
  email     String
  phone     String?
  address   String?
  
  users     User[]
  locations Location[]
  contracts Contract[]
  tickets   Ticket[]
  quotes    Quote[]
  invoices  Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id        String   @id @default(cuid())
  name      String
  address   String
  phone     String?
  contactName String?
  contactPhone String?
  
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id])
  
  equipment Equipment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Equipment {
  id               String    @id @default(cuid())
  model            String
  brand            String
  serialNumber     String?   @unique
  internalCode     String?   @unique
  status           String    @default("OPERATIONAL")
  purchaseDate     DateTime?
  installationDate DateTime?
  cost             Float?
  
  locationId String
  location   Location @relation(fields: [locationId], references: [id])
  
  tickets Ticket[]
  
  contracts Contract[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contract {
  id             String         @id @default(cuid())
  contractNumber String         @unique
  startDate      DateTime
  endDate        DateTime
  type           String
  status         String @default("PENDING")
  notes          String?

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  slaId String
  sla   ServiceLevelAgreement    @relation(fields: [slaId], references: [id])

  equipments Equipment[]
  tickets    Ticket[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceLevelAgreement {
  id                  String     @id @default(cuid())
  name                String     @unique
  description         String?
  responseTimeHours   Int
  resolutionTimeHours Int
  
  contracts Contract[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id           String   @id @default(cuid())
  ticketNumber String?  @unique
  title        String
  description  String?
  status       String   @default("OPEN")
  priority     String   @default("MEDIUM")
  
  createdById String
  createdBy   User     @relation("CreatedBy", fields: [createdById], references: [id])

  assignedToId String?
  assignedTo   User?    @relation("AssignedTo", fields: [assignedToId], references: [id])
  
  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  equipmentId String?
  equipment   Equipment? @relation(fields: [equipmentId], references: [id])
  
  contractId String?
  contract   Contract? @relation(fields: [contractId], references: [id])
  
  partsUsed   PartUsage[]
  timeEntries TimeEntry[]
  comments    Comment[]
  quote       Quote?
  invoices    Invoice[]
  photos      Photo[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id])
  
  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Inventory & Knowledge Base
model Part {
  id          String    @id @default(cuid())
  name        String
  sku         String?   @unique
  cost        Float?
  stock       Int
  minStock    Int
  
  usages            PartUsage[]
  purchaseOrderItems PurchaseOrderItem[]
  
  supplierId String?
  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PartUsage {
  id       String @id @default(cuid())
  quantity Int
  
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id])
  
  partId String
  part   Part   @relation(fields: [partId], references: [id])
  
  createdAt DateTime @default(now())
  @@unique([ticketId, partId])
}

model TimeEntry {
  id          String   @id @default(cuid())
  hours       Float
  description String?

  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
}

model KnowledgeBaseEntry {
  id          String      @id @default(cuid())
  modelName   String      @unique
  description String?
  checklists  Checklist[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Checklist {
  id        String  @id @default(cuid())
  name      String
  tasks     String // JSON string: [{ "id": "task1", "text": "Lubricar correa" }]
  
  knowledgeBaseId String
  knowledgeBase   KnowledgeBaseEntry @relation(fields: [knowledgeBaseId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Financial Models
model Supplier {
  id             String          @id @default(cuid())
  name           String
  contactName    String?
  email          String?
  phone          String?
  
  parts          Part[]
  purchaseOrders PurchaseOrder[]
  
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model PurchaseOrder {
  id             String   @id @default(cuid())
  orderNumber    String   @unique
  status         String   @default("DRAFT") // DRAFT, ORDERED, PARTIALLY_RECEIVED, RECEIVED, CANCELLED
  totalAmount    Float
  orderDate      DateTime @default(now())
  expectedDate   DateTime?
  notes          String?

  supplierId String
  supplier   Supplier @relation(fields: [supplierId], references: [id])

  items PurchaseOrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PurchaseOrderItem {
  id       String @id @default(cuid())
  quantity Int
  unitPrice Float

  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  partId String
  part   Part   @relation(fields: [partId], references: [id])

  @@unique([purchaseOrderId, partId])
}

model Quote {
  id         String   @id @default(cuid())
  issueDate  DateTime
  expiryDate DateTime
  status     String   @default("PENDING") // PENDING, APPROVED, REJECTED
  total      Decimal
  notes      String?

  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  ticketId String?  @unique
  ticket   Ticket?  @relation(fields: [ticketId], references: [id])
  
  items QuoteItem[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuoteItem {
  id          String  @id @default(cuid())
  description String
  quantity    Int
  unitPrice   Decimal
  
  quoteId String
  quote   Quote  @relation(fields: [quoteId], references: [id])
}

model Invoice {
  id          String      @id @default(cuid())
  invoiceDate DateTime
  dueDate     DateTime
  status      String      @default("DRAFT") // DRAFT, SENT, PAID, VOID
  total       Decimal
  
  clientId String
  client   Client @relation(fields: [clientId], references: [id])
  
  ticketId String?
  ticket   Ticket? @relation(fields: [ticketId], references: [id])

  items InvoiceItem[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InvoiceItem {
  id          String  @id @default(cuid())
  description String
  quantity    Int
  unitPrice   Decimal
  
  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
}

model PettyCashTransaction {
  id          String   @id @default(cuid())
  type        String // DEBIT, CREDIT
  amount      Float
  description String
  
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
}

model Photo {
  id          String   @id @default(cuid())
  url         String
  description String?
  
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
