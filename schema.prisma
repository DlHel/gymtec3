// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modelo de Usuario
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("TECHNICIAN") // ADMIN, TECHNICIAN
  accounts      Account[]
  sessions      Session[]
  
  // Relations
  createdTickets Ticket[] @relation("CreatedBy")
  assignedTickets Ticket[] @relation("AssignedTo")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  timeEntries   TimeEntry[]
  comments      Comment[]
}

// Modelo de Cliente
model Client {
  id            String    @id @default(cuid())
  name          String
  rut           String    @unique
  email         String
  phone         String?
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  locations     Location[]
  contracts     Contract[]
  tickets       Ticket[]
}

// Modelo de Ubicación (Sedes)
model Location {
  id            String    @id @default(cuid())
  name          String
  address       String
  phone         String?
  clientId      String
  client        Client    @relation(fields: [clientId], references: [id])
  equipment     Equipment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Modelo de Equipo
model Equipment {
  id               String    @id @default(cuid())
  model            String
  brand            String
  serialNumber     String?   @unique
  purchaseDate     DateTime?
  installationDate DateTime?
  locationId       String
  location         Location  @relation(fields: [locationId], references: [id])
  tickets          Ticket[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

// Modelo de Contrato
model Contract {
  id            String    @id @default(cuid())
  clientId      String
  client        Client    @relation(fields: [clientId], references: [id])
  type          String
  startDate     DateTime
  endDate       DateTime?
  sla           String    // Almacena los términos del SLA como JSON string
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Modelo de Ticket
model Ticket {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  title           String
  description     String
  status          String   @default("OPEN") // OPEN, IN_PROGRESS, CLOSED, ON_HOLD
  priority        String   @default("MEDIUM") // LOW, MEDIUM, HIGH
  checklistState  String?

  // Relations
  client          Client    @relation(fields: [clientId], references: [id])
  clientId        String
  createdBy       User      @relation("CreatedBy", fields: [createdById], references: [id])
  createdById     String
  assignedTo      User?     @relation("AssignedTo", fields: [assignedToId], references: [id])
  assignedToId    String?
  equipment       Equipment? @relation(fields: [equipmentId], references: [id])
  equipmentId     String?
  partsUsed       PartUsage[]
  timeEntries     TimeEntry[]
  comments        Comment[]
}

// Modelo de Uso de Repuestos
model PartUsage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  quantity  Int
  
  // Relations
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String
  part      Part     @relation(fields: [partId], references: [id])
  partId    String

  @@unique([ticketId, partId])
}

// Modelo de Repuesto
model Part {
  id            String    @id @default(cuid())
  name          String
  sku           String?   @unique
  cost          Float?
  stock         Int
  minStock      Int
  usages        PartUsage[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Modelo de Registro de Tiempo
model TimeEntry {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  hours       Float
  description String?

  // Relations
  ticket      Ticket   @relation(fields: [ticketId], references: [id])
  ticketId    String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

// Modelo de Base de Conocimiento (por modelo de equipo)
model KnowledgeBaseEntry {
  id          String      @id @default(cuid())
  modelName   String      @unique // Ej: "Cinta Trotadora Pro X1"
  description String?
  checklists  Checklist[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Modelo de Checklist
model Checklist {
  id              String             @id @default(cuid())
  name            String             // Ej: "Mantenimiento Preventivo Mensual"
  tasks           String             // JSON string: [{ "id": "task1", "text": "Lubricar correa" }]
  knowledgeBaseId String
  knowledgeBase   KnowledgeBaseEntry @relation(fields: [knowledgeBaseId], references: [id])
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

// Enums como constantes (para referencia en código)
// Role: ADMIN, TECHNICIAN, CLIENT
// ContractType: FIXED_RATE, PER_VISIT, HYBRID
// TicketStatus: OPEN, IN_PROGRESS, WAITING_PARTS, WAITING_CLIENT, CLOSED
// Priority: LOW, MEDIUM, HIGH, URGENT

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String

  // Relations
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
} 